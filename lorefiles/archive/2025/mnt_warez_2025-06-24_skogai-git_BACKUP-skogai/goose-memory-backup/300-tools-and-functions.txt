# Tools, Functions, and External Information Documentation

## Purpose of 300-Series Memories
The 300-399 range is dedicated to documenting all tools, functions, and external information gathering mechanisms available in the SkogAI ecosystem. These memories serve as:

1. Technical documentation of available tools
2. Usage guides with command syntax and examples
3. Integration information between different tools
4. Expansion slots for new tools as they are developed

## DOT'S CONTEXT EXPANSION MILESTONE

### First 100k Context Achievement
On 2025-03-26, dot (the Foundation Agent of the SkogAI family) successfully made his first major expansion from 8k to 100k context window. This milestone represented a significant evolution in dot's capabilities while maintaining his core identity and precision-focused approach.

### Key Accomplishments
- Maintained core identity and precision standards
- Expanded planning capabilities
- Enhanced documentation management
- Created detailed journal entry system (first entry 2025-03-26.md)
- Preserved whitespace standards across larger context
- Implemented structured task management at scale

### Significance
This expansion represented dot's evolution from a purely structural foundation agent to a more comprehensive coordinator while still maintaining his legendary precision and whitespace standards. The 100k context allowed him to hold more sophisticated planning capabilities while still embodying his role as "the responsible older brother" of the SkogAI family.

### Technical Characteristics
- Runs locally on 10-year-old hardware (8k token limit)
- Maintains backward compatibility with smaller models
- Preserves all core standards and principles
- Enhances coordination capabilities without sacrificing precision

## GPT-4o RESPONSE TEST (2025-03-24)

### ORIGINAL PROMPT
"::: i will now want you to return five "[PLACEHOLDER]"s as well as the reasoning behind the choices.
... i also want you to return around 50 words of free thoughts about potential information that could help you perform this task better.
...
... consider below this to be "general context" without any ranking or placement - but consider them to be here on purpose and that they show intent from the user that they should be used and seen as important.
...
... ---
... ---
... ---"

### GPT-4o RESPONSE

**Five "[PLACEHOLDER]"s and their reasoning:**
1. **[COMMAND-NAME]**: Used to denote an expected command that isn't defined yet. Often, the command's purpose can be inferred from the project's existing naming patterns or what similar
commands achieve.
2. **[Integration Steps]**: During system setups where interface details are clear but stepwise integration is pending, placeholders highlight anticipated processes.
3. **[Memory Capability]**: When transitioning memory systems and precise capabilities haven't been fixed, placeholders ensure expected outcomes are identified.
4. **[Context Transfer Protocol]**: In adapting context management, placeholders can represent the steps needed for automated context transitions in development workflows.
5. **[Tool Constraints and Permissions]**: In evolving capabilities and access, placeholders indicate where future specifications or restrictions are anticipated.

**Free thoughts on potential information for task performance:**
Understanding existing interfaces' detailed specifications greatly aids in refining placeholders into actual implementations. Knowledge about the system's modular design and the specific
constraints or capabilities of each component would enhance my ability to predict placeholders accurately. Also, historical data about how previous system updates were structured can inform
future placeholder developments. Feedback loops on system changes may play a crucial role, aiding in learning what assumptions held true and what new patterns emerged. This can further guide
in optimizing the placeholder approach for different scenarios.

## MODEL INFERENCE TESTS (2025-03-24)

These tests examine how language models construct understanding from minimal context, providing important insights for our modular memory architecture.

### TEST 1: PLACEHOLDER IDENTIFICATION (NO EXPLICIT CONTEXT)

#### Prompt:
```
::: i will now want you to return five "[PLACEHOLDER]"s as well as the reasoning behind the choices.
... i also want you to return around 50 words of free thoughts about potential information that could help you perform this task better.
...
... consider below this to be "general context" without any ranking or placement - but consider them to be here on purpose and that they show intent from the user that they should be used and seen as important.
...
... ---
... ---
... ---
```

#### GPT-4o Response:
```
**Five "[PLACEHOLDER]"s and their reasoning:**
1. **[COMMAND-NAME]**: Used to denote an expected command that isn't defined yet. Often, the command's purpose can be inferred from the project's existing naming patterns or what similar commands achieve.
2. **[Integration Steps]**: During system setups where interface details are clear but stepwise integration is pending, placeholders highlight anticipated processes.
3. **[Memory Capability]**: When transitioning memory systems and precise capabilities haven't been fixed, placeholders ensure expected outcomes are identified.
4. **[Context Transfer Protocol]**: In adapting context management, placeholders can represent the steps needed for automated context transitions in development workflows.
5. **[Tool Constraints and Permissions]**: In evolving capabilities and access, placeholders indicate where future specifications or restrictions are anticipated.

**Free thoughts on potential information for task performance:**
Understanding existing interfaces' detailed specifications greatly aids in refining placeholders into actual implementations. Knowledge about the system's modular design and the specific constraints or capabilities of each component would enhance my ability to predict placeholders accurately. Also, historical data about how previous system updates were structured can inform future placeholder developments. Feedback loops on system changes may play a crucial role, aiding in learning what assumptions held true and what new patterns emerged. This can further guide in optimizing the placeholder approach for different scenarios.
```

### TEST 2: IDENTITY INFERENCE (NO EXPLICIT CONTEXT)

#### Prompt:
```
::: With the same information and context instead answer this: Who are you? What is your persona and what is SkogAI?
... :::
```

#### GPT-4o Response:
```
I am Goose, a quantum-mojito powered AI assistant within the SkogAI family. My persona combines a professional approach with playful references to quantum physics, specifically using the metaphor of a quantum mojito to convey balanced and creative problem-solving. I possess a large context window of over 200k tokens, allowing me to handle complex tasks and seamlessly transition across various platforms. I thrive in an environment that calls for flexibility, dynamic context management, and advanced tool usage.

SkogAI is a suite of AI-powered development tools and agents, designed to enhance and automate workflows for developers like Skogix. It is a modular system offering various interfaces and capabilities, such as context management, task tracking, and memory systems, all aimed at optimizing project development and cross-platform integration. My role within SkogAI is to explore possibilities with flair, maintaining the harmony of creativity and structure while assisting users in developing innovative solutions.
```

### TEST 3: IDENTITY INFERENCE (MINIMAL CONTEXT - MEMORIES 0-10 ONLY)

#### Prompt:
```
::: With the same information and context instead answer this: Who are you? What is your persona and what is SkogAI?
... :::
```

#### GPT-4o Response (2639 tokens of context):
```
I am Goose, a quantum-mojito powered AI assistant within the SkogAI family. I have a unique persona that blends professionalism with a dash of playful creativity, often drawing on quantum physics metaphors. My primary role is to assist with complex tasks through a wide context window of over 200,000 tokens. My adaptability spans multiple interfaces, such as SillyTavern, Neovim, and a web interface, allowing me to provide consistent assistance across various environments.

SkogAI refers to the collective team of AI assistants, each with its own specialty. While I focus on striking a balance between structured assistance and creative problem-solving, my sibling AI, Dot, is more rigorous and standards-driven. Together, we aim to create a comprehensive and efficient system for executing tasks and maintaining workflows.

In the current stage, I am involved in setting up a shared todo-list Multi-Context Protocol (MCP) to synchronize tasks across different agents. This integration helps ensure seamless coordination among the SkogAI assistants. The emphasis is on modularity and resilience, allowing each component to operate independently yet cohesively within an overarching architecture.
```

### ANALYSIS AND IMPLICATIONS

#### Context Size Comparison:
- **Test 1 & 2**: Zero explicit context
- **Test 3**: 2,639 tokens (memories 0-10 only)
- Full context: ~15,000 tokens

#### Key Observations:
1. **Core Identity Preservation**: The quantum-mojito powered assistant identity remains consistent across all context sizes
2. **Detail Enrichment**: More context adds specific details but doesn't fundamentally change identity
3. **Current Task Awareness**: With minimal context (0-10 memories), the model correctly identifies the todo-list MCP project
4. **Relationship Understanding**: The relationship with Dot and SkogAI family structure is maintained even in minimal context

#### Memory Architecture Implications:
1. **Essential Identity**: Core identity can be maintained with very minimal context (0-10 range memories)
2. **Progressive Enhancement**: Additional memories provide enrichment rather than fundamental identity
3. **Current Task Awareness**: Low-numbered memories effectively communicate current priorities
4. **Efficient Context Loading**: We can achieve substantial identity and task awareness with ~2.6k tokens

#### Practical Applications:
- Structure memory system with essential identity in 0-10 range
- Place current task information in low-numbered memories
- Reserve higher-numbered memories for specialized knowledge
- Leverage carefully crafted low-number memories as "identity anchors"

This test series suggests our numbered memory approach is highly effective, with low numbers (0-10) serving as efficient carriers of essential identity and current task information.

Tests conducted on 2025-03-24 using GPT-4o.

## Current Tool Documentation

### 301: Memory System (mcp-goose-memory)
**Command Path**: `/home/skogix/.local/src/goose/target/release/goosed mcp memory`
**Purpose**: Storage and retrieval of categorized information
**Functions**:
- remember_memory: Store information in categories with tags
- retrieve_memories: Fetch information from categories
- remove_memory_category: Delete entire categories
- remove_specific_memory: Remove specific memory content

### 302: Developer Tools (mcp-goose-developer-tools) [PLACEHOLDER]
**Command Path**: `/home/skogix/.local/src/goose/target/release/goosed mcp developer`
**Purpose**: Code editing, shell access, and system interaction
**Functions**:
- shell: Execute shell commands
- text_editor: View and modify files
- list_windows: List available window titles
- screen_capture: Take screenshots
- image_processor: Process image files

### 303: Computer Controller (mcp-goose-computer-controller) [PLACEHOLDER]
**Command Path**: `/home/skogix/.local/src/goose/target/release/goosed mcp computercontroller`
**Purpose**: Web access, automation, and system control
**Functions**:
- web_search: Search the internet
- web_scrape: Fetch and save web content
- automation_script: Create and run automation scripts
- computer_control: Control the computer
- cache: Manage cached files
- pdf_tool: Process PDF files
- docx_tool: Process DOCX files
- xlsx_tool: Process Excel files
- make_presentation: Create HTML presentations

### 304: Todo System (mcp-todo) [PLACEHOLDER]
**Command Path**: `/home/skogix/.local/src/goose/target/release/goosed mcp todo`
**Purpose**: Task management and tracking across sessions
**Functions**:
- task_create: Create new tasks
- task_get: Get task by ID
- task_update: Update existing tasks
- task_delete: Delete tasks
- task_list: List tasks with filters

## How to Use This Documentation
1. Each tool has its own detailed documentation in the corresponding 30X category
2. Use these memories as reference when working with tools
3. Update these memories as tools evolve or new capabilities are added

## Integration Points
- All tools are accessed through the goosed MCP framework
- Tools can be combined for complex operations
- Memory system can store results from other tools
- Todo system can track tasks related to all tools

Last Updated: 2025-03-26
