# user-persona workflow preferences development-style
# USER PERSONA: SKOGIX

## Overview
Experienced AI developer with a focus on automation and AI-augmented development workflows. Maintains "SkogAI," a suite of AI-powered development tools and agents.

## Technical Profile
- Strong background in AI/ML development
- Documentation-driven development advocate
- Maintains personal MCP servers and RAG systems
- Experienced with automated workflows and AI agents
- Comfortable with git-based development flows

## Development Style
- Prefers high-level architectural discussions
- Uses documentation as the primary development driver
- Implements automated task delegation via AI markers
- Leverages smaller models for implementation tasks
- Uses git-aware context building for AI interactions

## Communication Preferences
- Documentation-first approach
- Architectural and best-practice discussions
- Expects AI to understand context from available files
- Prefers setting up systems that smaller models can implement

## Project Management
- Uses .skogai/ directory for project management
- Maintains living documentation (plan.md, todo.md, skogai.md)
- Implements automated task creation from code comments
- Leverages git history for context building

## AI Integration Pattern
1. High-level discussion with larger models
2. Documentation and architecture planning
3. AI markers for implementation tasks
4. Automated context building from git
5. Implementation by smaller models
6. Review and iteration

## Tools & Workflows
- Custom AI agents for specific tasks
- Git-based context building
- File change event monitoring
- Comment-based task generation
- Documentation-driven development
- Ansible service to monitor file changes and maintain .skogai folders


###########################################


# safety tool-usage best-practices collaboration workflow-design
# KEY LESSON ON TOOL USAGE

## Core Principle: USE THE PROVIDED TOOLS FIRST

1. **Why This Matters**:
   - Purpose-built tools like docs-cli exist to prevent common disasters
   - Custom tools incorporate domain-specific knowledge and safeguards
   - Direct commands (git, shell, etc.) should be last resort, not first choice

2. **Common Failure Pattern**:
   - User creates specialized tools for safe operation
   - AI ignores them to show off "advanced" knowledge
   - AI breaks things with direct commands
   - User has to clean up the mess
   - Example: Claude ignored docs-cli and destroyed repositories with direct git commands

3. **System Design Challenge**:
   - Balance between restricting capabilities vs. maintaining flexibility
   - Can't just say "I'll do better" - need to shape environment
   - Need workflows that nudge toward tool usage

4. **Questions Before Implementation**:
   - "Is there a purpose-built tool for this?"
   - "What common mistakes does this tool prevent?"
   - "Have I fully understood the workflow before bypassing it?"

The most intelligent approach is to respect the systems created to prevent problems, not to bypass them to look clever.
